// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/http/rest/productservice/new.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockProductService) Fetch(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fetch", response, request)
}

// Fetch indicates an expected call of Fetch.
func (mr *MockProductServiceMockRecorder) Fetch(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockProductService)(nil).Fetch), response, request)
}

// FetchOne mocks base method.
func (m *MockProductService) FetchOne(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchOne", response, request)
}

// FetchOne indicates an expected call of FetchOne.
func (mr *MockProductServiceMockRecorder) FetchOne(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOne", reflect.TypeOf((*MockProductService)(nil).FetchOne), response, request)
}

// Purchase mocks base method.
func (m *MockProductService) Purchase(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purchase", response, request)
}

// Purchase indicates an expected call of Purchase.
func (mr *MockProductServiceMockRecorder) Purchase(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purchase", reflect.TypeOf((*MockProductService)(nil).Purchase), response, request)
}
